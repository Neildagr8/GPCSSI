# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/134Z9TpOl3Tl6xxWUGbVSHVEVTNDWQNlp
"""

import pandas as pd
import numpy as np
from sklearn import *
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from google.colab import files
import io
uploaded = files.upload()

df = pd.read_csv(io.StringIO(uploaded['PhishingUrlDataset.csv'].decode('utf-8')))

df.head()

df.info()

#from sklearn.model_selection import train_test_split
#X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)
#X_train = inputs[2000:]
#Y_train = outputs[2000:]
#classifier = linear_model.LogisticRegression()
#classifier.fit(X_train, Y_train)

#inputs = df[:,:-1]
#outputs = df[:, -1]
#training_inputs = inputs[:2000]
#training_outputs = outputs[:2000] 
#testing_inputs = inputs[2000:]
#testing_outputs = outputs[2000:]

from sklearn.model_selection import train_test_split
input_labels=['having_IP_Address','URL_Length','Shortining_Service','having_At_Symbol','double_slash_redirecting','Prefix_Suffix','having_Sub_Domain','SSLfinal_State','Domain_registeration_length','Favicon','port','HTTPS_token','Request_URL','URL_of_Anchor','Links_in_tags','SFH','Submitting_to_email','Abnormal_URL','Redirect','on_mouseover','RightClick','popUpWidnow','Iframe','age_of_domain','DNSRecord','web_traffic','Page_Rank','Google_Index','Links_pointing_to_page','Statistical_report']
output_label='Result'
train_df, test_df = train_test_split(df, test_size = 0.2, random_state = 1)
x_train = train_df[input_labels]
y_train = train_df[output_label]  
x_test = test_df[input_labels]
y_test = test_df[output_label].values.squeeze()

classifier = linear_model.LogisticRegression()
classifier.fit(x_train,y_train)
predictions = classifier.predict(x_test)

accuracy = 100.0 * accuracy_score(y_test, predictions)
print("accuracy="+str(accuracy))

#import seaborn as sns
#import matplotlib.pyplot as plt 
#y_prob = classifier.predict_proba(x_test)
#predictions = predictions.squeeze()
#x_test_view = x_test[input_labels].values.squeeze()
#sns.scatterplot(x = x_test_view, y = predictions, hue = y_test)
#sns.scatterplot(x = x_test_view, y = y_prob[:,1], hue = y_test)
#boundary = 10
#sns.scatterplot(x = 'x_test', y = 'y_prob', data = df,hue=y_test)
#plt.plot([boundary, boundary], [0, 1], 'g', linewidth = 6)